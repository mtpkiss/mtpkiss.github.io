<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>盒子哥</title>
  
  <subtitle>又一个博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.imaom.com/"/>
  <updated>2019-06-11T05:36:14.520Z</updated>
  <id>https://www.imaom.com/</id>
  
  <author>
    <name>mtpkiss@gmail.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 搞定 session 共享</title>
    <link href="https://www.imaom.com/2019/06/11/SpringBoot-seesion/"/>
    <id>https://www.imaom.com/2019/06/11/SpringBoot-seesion/</id>
    <published>2019-06-11T05:27:28.000Z</published>
    <updated>2019-06-11T05:36:14.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-创建工程"><a href="#1-1-创建工程" class="headerlink" title="1.1 创建工程"></a>1.1 创建工程</h2><p>首先 创建一个 Spring Boot 工程，引入 Web、Spring Session 以及 Redis:</p><p>创建成功之后，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>这里我使用的 Spring Boot 版本是 2.1.4 ，如果使用当前最新版 Spring Boot2.1.5 的话，除了上面这些依赖之外，需要额外添加 Spring Security 依赖（其他操作不受影响，仅仅只是多了一个依赖，当然也多了 Spring Security 的一些默认认证流程）。</p><h2 id="1-2-配置-Redis"><a href="#1-2-配置-Redis" class="headerlink" title="1.2 配置 Redis"></a>1.2 配置 Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=192.168.66.128</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=123</span><br><span class="line">spring.redis.database=0</span><br></pre></td></tr></table></figure><p>这里的 Redis ，我虽然配置了四行，但是考虑到端口默认就是 6379 ，database 默认就是 0，所以真正要配置的，其实就是两行。</p><h2 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h2><p>配置完成后 ，就可以使用 Spring Session 了，其实就是使用普通的 HttpSession ，其他的 Session 同步到 Redis 等操作，框架已经自动帮你完成了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    Integer port;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/set"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>, <span class="string">"javaboy"</span>);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session.getAttribute(<span class="string">"user"</span>) + <span class="string">":"</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到一会 Spring Boot 将以集群的方式启动 ，为了获取每一个请求到底是哪一个 Spring  Boot 提供的服务，需要在每次请求时返回当前服务的端口号，因此这里我注入了 server.port 。</p><p>接下来 ，项目打包：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe816286c228?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>打包之后，启动项目的两个实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8080</span><br><span class="line">java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8081</span><br></pre></td></tr></table></figure><p>然后先访问 <code>localhost:8080/set</code> 向 <code>8080</code> 这个服务的 <code>Session</code> 中保存一个变量，访问完成后，数据就已经自动同步到 <code>Redis</code>  中 了 ：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe8162b0d36b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>然后，再调用 <code>localhost:8081/get</code> 接口，就可以获取到 <code>8080</code> 服务的 <code>session</code> 中的数据：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe816433d028?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>此时关于 session 共享的配置就已经全部完成了，session 共享的效果我们已经看到了，但是每次访问都是我自己手动切换服务实例，因此，接下来我们来引入 Nginx ，实现服务实例自动切换。</p><h2 id="1-4-引入-Nginx"><a href="#1-4-引入-Nginx" class="headerlink" title="1.4 引入 Nginx"></a>1.4 引入 Nginx</h2><p>很简单，进入  Nginx 的安装目录的 conf 目录下（默认是在 <code>/usr/local/nginx/conf</code>），编辑 nginx.conf 文件:</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe81b185403c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>在这段配置中：</p><ol><li>upstream 表示配置上游服务器</li><li>javaboy.org 表示服务器集群的名字，这个可以随意取名字</li><li>upstream 里边配置的是一个个的单独服务</li><li>weight 表示服务的权重，意味者将有多少比例的请求从 Nginx 上转发到该服务上</li><li>location 中的 proxy_pass 表示请求转发的地址，<code>/</code> 表示拦截到所有的请求，转发转发到刚刚配置好的服务集群中</li><li>proxy_redirect 表示设置当发生重定向请求时，nginx 自动修正响应头数据（默认是 Tomcat 返回重定向，此时重定向的地址是 Tomcat 的地址，我们需要将之修改使之成为 Nginx 的地址）。</li></ol><p>配置完成后，将本地的 Spring Boot 打包好的 jar 上传到 Linux ，然后在 Linux 上分别启动两个 Spring Boot 实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8080 &amp;</span><br><span class="line">nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8081 &amp;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>nohup 表示当终端关闭时，Spring Boot 不要停止运行</li><li>&amp; 表示让 Spring Boot 在后台启动</li></ul><p>配置完成后，重启 Nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>Nginx 启动成功后，我们首先手动清除 Redis 上的数据，然后访问 <code>192.168.66.128/set</code> 表示向 <code>session</code> 中保存数据，这个请求首先会到达 <code>Nginx</code> 上，再由 <code>Nginx</code> 转发给某一个 <code>Spring Boot</code> 实例：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe81b8a9bd26?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如上，表示端口为 <code>8081</code> 的 <code>Spring Boot</code> 处理了这个 <code>/set</code> 请求，再访问 <code>/get</code> 请求：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/4/16b1fe81e0c0aa70?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>可以看到，<code>/get</code> 请求是被端口为 8080 的服务所处理的。</p><p>作者：[江南一点雨</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-创建工程&quot;&gt;&lt;a href=&quot;#1-1-创建工程&quot; class=&quot;headerlink&quot; title=&quot;1.1 创建工程&quot;&gt;&lt;/a&gt;1.1 创建工程&lt;/h2&gt;&lt;p&gt;首先 创建一个 Spring Boot 工程，引入 Web、Spring Session 以
      
    
    </summary>
    
      <category term="java" scheme="https://www.imaom.com/categories/java/"/>
    
    
      <category term="SpringBoot" scheme="https://www.imaom.com/tags/SpringBoot/"/>
    
      <category term="Session" scheme="https://www.imaom.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 整合 Shiro</title>
    <link href="https://www.imaom.com/2019/06/11/SpringBoot-shiro/"/>
    <id>https://www.imaom.com/2019/06/11/SpringBoot-shiro/</id>
    <published>2019-06-11T05:19:54.000Z</published>
    <updated>2019-06-11T05:36:06.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生的整合"><a href="#原生的整合" class="headerlink" title="原生的整合"></a>原生的整合</h2><ul><li>创建项目</li></ul><p>创建一个 Spring Boot 项目，只需要添加 Web 依赖即可：<br>项目创建成功后，加入 Shiro 相关的依赖，完整的 pom.xml 文件中的依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>创建 Realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"javaboy"</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"账户不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, <span class="string">"123"</span>, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在 Realm 中实现简单的认证操作即可，不做授权，授权的具体写法和 SSM 中的 Shiro 一样，不赘述。这里的认证表示用户名必须是 javaboy ，用户密码必须是 123 ，满足这样的条件，就能登录成功！</p><ul><li>配置 Shiro</li></ul><p>接下来进行 Shiro 的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MyRealm <span class="title">myRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(myRealm());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/unauthorizedurl"</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/doLogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里进行 Shiro 的配置主要配置 3 个 Bean ：</p><ol><li>首先需要提供一个 Realm 的实例。</li><li>需要配置一个 SecurityManager，在 SecurityManager 中配置 Realm。</li><li>配置一个 ShiroFilterFactoryBean ，在 ShiroFilterFactoryBean 中指定路径拦截规则等。</li><li>配置登录和测试接口。</li></ol><p>其中，ShiroFilterFactoryBean 的配置稍微多一些，配置含义如下：</p><ul><li>setSecurityManager 表示指定 SecurityManager。</li><li>setLoginUrl 表示指定登录页面。</li><li>setSuccessUrl 表示指定登录成功页面。</li><li>接下来的 Map 中配置了路径拦截规则，注意，要有序。</li></ul><p>这些东西都配置完成后，接下来配置登录 Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/doLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(<span class="keyword">new</span> UsernamePasswordToken(username, password));</span><br><span class="line">            System.out.println(<span class="string">"登录成功!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"登录失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"please login!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试时，首先访问 /hello 接口，由于未登录，所以会自动跳转到 /login 接口：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/11/16b444ad77baae8b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>然后调用 /doLogin 接口完成登录：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/11/16b444ad3f4077b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>再次访问 /hello 接口，就可以成功访问了：</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/11/16b444ad3f7dc9e7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h1 id="使用-Shiro-Starter"><a href="#使用-Shiro-Starter" class="headerlink" title="使用 Shiro Starter"></a>使用 Shiro Starter</h1><p>上面这种配置方式实际上相当于把 SSM 中的 XML 配置拿到 Spring Boot 中用 Java 代码重新写了一遍，除了这种方式之外，我们也可以直接使用 Shiro 官方提供的 Starter 。</p><ul><li>创建工程，和上面的一样</li></ul><p>创建成功后，添加  <code>shiro-spring-boot-web-starter</code> ，这个依赖可以代替之前的 <code>shiro-web</code> 和 <code>shiro-spring</code> 两个依赖，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 Realm</li></ul><p>这里的 Realm 和前面的一样，我就不再赘述。</p><ul><li>配置 Shiro 基本信息</li></ul><p>接下来在 application.properties 中配置 Shiro 的基本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiro.sessionManager.sessionIdCookieEnabled=true</span><br><span class="line">shiro.sessionManager.sessionIdUrlRewritingEnabled=true</span><br><span class="line">shiro.unauthorizedUrl=/unauthorizedurl</span><br><span class="line">shiro.web.enabled=true</span><br><span class="line">shiro.successUrl=/index</span><br><span class="line">shiro.loginUrl=/login</span><br></pre></td></tr></table></figure><p>配置解释：</p><ol><li>第一行表示是否允许将sessionId 放到 cookie 中</li><li>第二行表示是否允许将 sessionId 放到 Url 地址拦中</li><li>第三行表示访问未获授权的页面时，默认的跳转路径</li><li>第四行表示开启 shiro</li><li>第五行表示登录成功的跳转页面</li><li>第六行表示登录页面</li></ol><ul><li>配置 ShiroConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MyRealm <span class="title">myRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(myRealm());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        definition.addPathDefinition(<span class="string">"/doLogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="keyword">return</span> definition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的配置和前面的比较像，但是不再需要 ShiroFilterFactoryBean 实例了，替代它的是 ShiroFilterChainDefinition ，在这里定义 Shiro 的路径匹配规则即可。</p><p>原文：<a href="https://juejin.im/post/5cff0cfc5188250d28510681" target="_blank" rel="noopener">江南一点雨</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原生的整合&quot;&gt;&lt;a href=&quot;#原生的整合&quot; class=&quot;headerlink&quot; title=&quot;原生的整合&quot;&gt;&lt;/a&gt;原生的整合&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建项目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个 Spring Boot 项目，只需要添加 Web 依赖即
      
    
    </summary>
    
      <category term="java" scheme="https://www.imaom.com/categories/java/"/>
    
    
      <category term="SpringBoot" scheme="https://www.imaom.com/tags/SpringBoot/"/>
    
      <category term="Shiro" scheme="https://www.imaom.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Form_Fillers</title>
    <link href="https://www.imaom.com/2019/05/31/Form-Fillers/"/>
    <id>https://www.imaom.com/2019/05/31/Form-Fillers/</id>
    <published>2019-05-31T02:19:43.000Z</published>
    <updated>2019-05-31T02:44:21.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Form-fillers"><a href="#Form-fillers" class="headerlink" title="Form fillers"></a>Form fillers</h2><p><img src="https://s2.ax1x.com/2019/05/31/VQgsQe.jpg" alt="VQgsQe.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQgBRO.jpg" alt="VQgBRO.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQgDzD.jpg" alt="VQgDzD.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQg0JK.jpg" alt="VQg0JK.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQgwi6.jpg" alt="VQgwi6.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQg6Ld.jpg" alt="VQg6Ld.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQgysH.jpg" alt="VQgysH.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQggeA.jpg" alt="VQggeA.jpg"></p><p><img src="https://s2.ax1x.com/2019/05/31/VQg2dI.jpg" alt="VQg2dI.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Form-fillers&quot;&gt;&lt;a href=&quot;#Form-fillers&quot; class=&quot;headerlink&quot; title=&quot;Form fillers&quot;&gt;&lt;/a&gt;Form fillers&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/
      
    
    </summary>
    
    
      <category term="other" scheme="https://www.imaom.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Docker-hello-world</title>
    <link href="https://www.imaom.com/2019/04/28/Docker/docker-hello-world/"/>
    <id>https://www.imaom.com/2019/04/28/Docker/docker-hello-world/</id>
    <published>2019-04-28T04:49:43.000Z</published>
    <updated>2019-05-08T03:16:40.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p><code>windows10 ltsc</code></p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 <code>Docker</code></h2><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">Docker下载</a></p><p>安装完毕后再状态栏可以看到小鲸鱼的图标</p><h2 id="Docker-Hello-World"><a href="#Docker-Hello-World" class="headerlink" title="Docker Hello World"></a>Docker Hello World</h2><h3 id="检查是否正常运行"><a href="#检查是否正常运行" class="headerlink" title="检查是否正常运行"></a>检查是否正常运行</h3><p><code>docker --version</code><br>正确输出<code>Docker version 18.09.2, build 6247962</code> 版本号,安装完毕</p><h3 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h3><p>右键状态栏小鲸鱼图标–&gt;<code>Settings</code>–&gt;<code>Daemon</code>–&gt;<code>Registy Mirrors</code> 输入 <code>https://你的加速地址.mirror.aliyuncs.com</code> </p><h4 id="如何获得阿里云的容器加速地址"><a href="#如何获得阿里云的容器加速地址" class="headerlink" title="如何获得阿里云的容器加速地址"></a>如何获得阿里云的容器加速地址</h4><ul><li>登陆<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a></li><li>产品与服务–&gt;容器镜像服务–&gt;镜像中心–&gt;镜像加速器</li></ul><p><img src="https://s2.ax1x.com/2019/04/28/EMbUfO.png" alt="Settings.png"><br><img src="https://s2.ax1x.com/2019/04/28/EMvf3V.png" alt="Registy Mirrors.png"></p><h3 id="修改默认存放位置"><a href="#修改默认存放位置" class="headerlink" title="修改默认存放位置"></a>修改默认存放位置</h3><p><code>Docker</code> 在 <code>windows</code> 下默认存放位置是 <code>C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\MobyLinuxVM.vhdx</code>  若需要修改的话.可移动到其他盘符</p><p><img src="https://s2.ax1x.com/2019/04/28/EMbw1e.png" alt="Advanced.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>docker pull hello-world</code></p><p>运行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete</span><br><span class="line">Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br></pre></td></tr></table></figure><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p><code>docker run hello-world</code></p><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></p><p>到这里,已经成功运行了第一个<code>docker image</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;p&gt;&lt;code&gt;windows10 ltsc&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-Docker&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
      <category term="docker" scheme="https://www.imaom.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://www.imaom.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Description Resource Path Location Type An error occurred while filtering</title>
    <link href="https://www.imaom.com/2019/04/18/Eclipse-Maven-Project-%E6%8A%A5%E9%94%99/"/>
    <id>https://www.imaom.com/2019/04/18/Eclipse-Maven-Project-报错/</id>
    <published>2019-04-18T05:08:01.000Z</published>
    <updated>2019-05-08T03:16:40.276Z</updated>
    
    <content type="html"><![CDATA[<p>Eclipse下<code>springboot maven</code>项目,报错如下</p><p><code>Description Resource Path Location Type An error occurred while filtering</code></p><a id="more"></a><p>解决办法</p><ul><li>右键项目 <code>Maven -&gt; update project</code> 快捷键 <code>alt+f5</code>//一般情况下可以解决,如果无效请尝试下一个命令</li><li><code>mvn eclipse:clean</code> //重新导入项目</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Eclipse下&lt;code&gt;springboot maven&lt;/code&gt;项目,报错如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Description Resource Path Location Type An error occurred while filtering&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.imaom.com/categories/java/"/>
    
    
      <category term="java" scheme="https://www.imaom.com/tags/java/"/>
    
      <category term="Eclipse" scheme="https://www.imaom.com/tags/Eclipse/"/>
    
      <category term="maven" scheme="https://www.imaom.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>mac下配置开发环境</title>
    <link href="https://www.imaom.com/2019/04/06/mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://www.imaom.com/2019/04/06/mac下配置开发环境/</id>
    <published>2019-04-06T05:33:21.000Z</published>
    <updated>2019-05-08T08:11:16.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</span><br></pre></td></tr></table></figure><h3 id="关闭隐藏文件显示"><a href="#关闭隐藏文件显示" class="headerlink" title="关闭隐藏文件显示"></a>关闭隐藏文件显示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">false</span> ; killall Finder</span><br></pre></td></tr></table></figure><h3 id="锁定程序坞"><a href="#锁定程序坞" class="headerlink" title="锁定程序坞"></a>锁定程序坞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock contents-immutable -boolean YES; killall Dock</span><br></pre></td></tr></table></figure><h3 id="解锁程序坞"><a href="#解锁程序坞" class="headerlink" title="解锁程序坞"></a>解锁程序坞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Dock contents-immutable -bool no; killall Dock</span><br></pre></td></tr></table></figure><p>可通过自动操作-&gt;应用程序-&gt;运行 shell 脚本,创建程序保存起来</p><h2 id="下载-Java-并环境变量"><a href="#下载-Java-并环境变量" class="headerlink" title="下载 Java 并环境变量"></a>下载 Java 并环境变量</h2><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java 官网</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><h2 id="下载-maven-并环境变量"><a href="#下载-maven-并环境变量" class="headerlink" title="下载 maven 并环境变量"></a>下载 maven 并环境变量</h2><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven 官网</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/Users/ex/Documents/apache-maven-3.6.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><h2 id="maven-使用阿里云的镜像"><a href="#maven-使用阿里云的镜像" class="headerlink" title="maven 使用阿里云的镜像"></a>maven 使用阿里云的镜像</h2><p><a href="https://maven.aliyun.com/" target="_blank" rel="noopener">阿里云镜像官网</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="下载-vscode-配置常用插件"><a href="#下载-vscode-配置常用插件" class="headerlink" title="下载 vscode 配置常用插件"></a>下载 vscode 配置常用插件</h2><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode 官网</a></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>Chinese (Simplified) Language Pack for Visual Studio Code</li><li>Java Extension Pack </li><li>One Dark Pro</li><li>vscode-icons</li><li>Auto Rename Tag</li><li>其他</li></ul><p>在环境变量中已经配置了 <code>JAVA_HOME</code> <code>vscode</code> 中就不需要配置 <code>java.home</code> 了</p><h2 id="安装-下载工具"><a href="#安装-下载工具" class="headerlink" title="安装 下载工具"></a>安装 下载工具</h2><h4 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装<code>aria2</code></h4><p><code>brew install aria2</code></p><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .aria2</span><br><span class="line"><span class="built_in">cd</span> .aria2</span><br><span class="line">touch aria2.conf</span><br><span class="line">touch aria2.session</span><br></pre></td></tr></table></figure><p>aria2.conf 内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">## &apos;#&apos;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br><span class="line"></span><br><span class="line">## 文件保存相关 ##</span><br><span class="line"></span><br><span class="line"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="line">dir=/Users/ex/Downloads</span><br><span class="line"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="line">disk-cache=32M</span><br><span class="line"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line"># falloc和trunc则需要文件系统和内核支持</span><br><span class="line"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="line"># file-allocation=falloc</span><br><span class="line"># 断点续传</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## 下载连接相关 ##</span><br><span class="line"></span><br><span class="line"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">max-concurrent-downloads=1</span><br><span class="line"># 同一服务器连接数, 添加时可指定, 默认:1</span><br><span class="line">max-connection-per-server=5</span><br><span class="line"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="line"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br><span class="line">min-split-size=10M</span><br><span class="line"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">split=5</span><br><span class="line"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-download-limit=0</span><br><span class="line"># 单个任务下载速度限制, 默认:0</span><br><span class="line">#max-download-limit=0</span><br><span class="line"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line"># 单个任务上传速度限制, 默认:0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line"># 禁用IPv6, 默认:false</span><br><span class="line">disable-ipv6=true</span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"></span><br><span class="line"># 从会话文件中读取下载任务 这里的 ex 是我的用户名</span><br><span class="line">input-file=/Users/ex/.aria2/aria2.session</span><br><span class="line"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span><br><span class="line">save-session=/Users/ex/.aria2/aria2.session</span><br><span class="line"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC相关设置 ##</span><br><span class="line"></span><br><span class="line"># 启用RPC, 默认:false</span><br><span class="line">enable-rpc=true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all=true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">#event-poll=select</span><br><span class="line"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line">## BT/PT下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">#follow-torrent=true</span><br><span class="line"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port=51413</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">#bt-max-peers=55</span><br><span class="line"># 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">enable-dht=false</span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">#enable-dht6=false</span><br><span class="line"># DHT网络监听端口, 默认:6881-6999</span><br><span class="line">#dht-listen-port=6881-6999</span><br><span class="line"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">#bt-enable-lpd=false</span><br><span class="line"># 种子交换, PT需要禁用, 默认:true</span><br><span class="line">enable-peer-exchange=false</span><br><span class="line"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">#bt-request-peer-speed-limit=50K</span><br><span class="line"># 客户端伪装, PT需要</span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">seed-ratio=0</span><br><span class="line"># 强制保存会话, 话即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">#force-save=false</span><br><span class="line"># BT校验相关, 默认:true</span><br><span class="line">#bt-hash-check-seed=true</span><br><span class="line"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure></p><h4 id="新建run-aria2-sh"><a href="#新建run-aria2-sh" class="headerlink" title="新建run_aria2.sh"></a>新建<code>run_aria2.sh</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh#!/bin/sh</span></span><br><span class="line">aria2c --conf-path=<span class="string">"/Users/ex/.aria2/aria2.conf"</span> -D</span><br></pre></td></tr></table></figure><h4 id="设置权限-并添加到自启"><a href="#设置权限-并添加到自启" class="headerlink" title="设置权限 并添加到自启"></a>设置权限 并添加到自启</h4><p><code>sudo chmod 777 run_aria2.sh</code><br>系统偏好设置-&gt;用户与群组-&gt;登陆项-点击+把刚才创建的<code>run_aria2.sh</code>加进去</p><h4 id="Chrome-浏览器安装插件Aria2-for-Chrome"><a href="#Chrome-浏览器安装插件Aria2-for-Chrome" class="headerlink" title="Chrome 浏览器安装插件Aria2 for Chrome"></a>Chrome 浏览器安装插件<code>Aria2 for Chrome</code></h4><p>本来准备使用自动操作的,但是不清楚为什么 aria2c 一直提示命令找不到</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;显示隐藏文件&quot;&gt;&lt;a href=&quot;#显示隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;显示隐藏文
      
    
    </summary>
    
      <category term="java" scheme="https://www.imaom.com/categories/java/"/>
    
    
      <category term="java" scheme="https://www.imaom.com/tags/java/"/>
    
      <category term="mac" scheme="https://www.imaom.com/tags/mac/"/>
    
      <category term="vscode" scheme="https://www.imaom.com/tags/vscode/"/>
    
      <category term="aria2" scheme="https://www.imaom.com/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.imaom.com/2017/12/05/hello-world/"/>
    <id>https://www.imaom.com/2017/12/05/hello-world/</id>
    <published>2017-12-05T01:30:55.000Z</published>
    <updated>2019-05-08T03:16:40.277Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomString</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      Random ran = <span class="keyword">new</span> Random(i);</span><br><span class="line">      StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; ; n++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">int</span> k = ran.nextInt(<span class="number">27</span>);</span><br><span class="line">          <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          sb.append((<span class="keyword">char</span>)(<span class="string">'`'</span> + k));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      System.out.println(randomString(-<span class="number">229985452</span>)+<span class="string">" "</span>+randomString(-<span class="number">147909649</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="https://www.imaom.com/categories/java/"/>
    
    
      <category term="java" scheme="https://www.imaom.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据去重</title>
    <link href="https://www.imaom.com/2017/12/05/mysql-result-1/"/>
    <id>https://www.imaom.com/2017/12/05/mysql-result-1/</id>
    <published>2017-12-05T01:30:55.000Z</published>
    <updated>2019-06-11T05:37:00.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sql语句来自网络-个人收集-未进行测试-请使用前备份"><a href="#Sql语句来自网络-个人收集-未进行测试-请使用前备份" class="headerlink" title="Sql语句来自网络,个人收集,未进行测试,请使用前备份"></a>Sql语句来自网络,个人收集,未进行测试,请使用前备份</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> consum_record</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  consum_record,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">id</span>,</span><br><span class="line">      user_id,</span><br><span class="line">      monetary,</span><br><span class="line">      consume_time</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      consum_record</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">      user_id,</span><br><span class="line">      monetary,</span><br><span class="line">      consume_time</span><br><span class="line">    <span class="keyword">HAVING</span></span><br><span class="line">      <span class="keyword">count</span>(*) &gt; <span class="number">1</span></span><br><span class="line">  ) t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  consum_record.user_id = t2.user_id</span><br><span class="line"><span class="keyword">AND</span> consum_record.monetary = t2.monetary</span><br><span class="line"><span class="keyword">AND</span> consum_record.consume_time = t2.consume_time</span><br><span class="line"><span class="keyword">AND</span> consum_record.id &gt; t2.id;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li><p>查询出重复记录形成一个集合（临时表t2），集合里是每种重复记录的最小ID</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">id</span>,</span><br><span class="line"> user_id,</span><br><span class="line"> monetary,</span><br><span class="line"> consume_time</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line"> consum_record</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> user_id,</span><br><span class="line"> monetary,</span><br><span class="line"> consume_time</span><br><span class="line"> <span class="keyword">HAVING</span></span><br><span class="line"> <span class="keyword">count</span>(*) &gt; <span class="number">1</span></span><br><span class="line"> ) t2</span><br></pre></td></tr></table></figure></li><li><p>关联判断重复基准的字段根据条件，删除原表中id大于t2中id的记录</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    consum_record.user_id = t2.user_id</span><br><span class="line">AND consum_record.monetary = t2.monetary</span><br><span class="line">AND consum_record.consume_time = t2.consume_time</span><br><span class="line">AND consum_record.id &gt; t2.id</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Sql语句来自网络-个人收集-未进行测试-请使用前备份&quot;&gt;&lt;a href=&quot;#Sql语句来自网络-个人收集-未进行测试-请使用前备份&quot; class=&quot;headerlink&quot; title=&quot;Sql语句来自网络,个人收集,未进行测试,请使用前备份&quot;&gt;&lt;/a&gt;Sql语句来自网络,个人收集,未进行测试,请使用前备份&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DELETE&lt;/span&gt; consum_record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  consum_record,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user_id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      monetary,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      consume_time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      consum_record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user_id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      monetary,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      consume_time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;HAVING&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(*) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ) t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  consum_record.user_id = t2.user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; consum_record.monetary = t2.monetary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; consum_record.consume_time = t2.consume_time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; consum_record.id &amp;gt; t2.id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://www.imaom.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>生成乱数假文</title>
    <link href="https://www.imaom.com/2017/11/30/%E7%94%9F%E6%88%90%E4%B9%B1%E6%95%B0%E5%81%87%E6%96%87/"/>
    <id>https://www.imaom.com/2017/11/30/生成乱数假文/</id>
    <published>2017-11-30T07:39:33.000Z</published>
    <updated>2019-05-08T03:16:40.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>lorem</p></blockquote><p>输入 <code>lorem</code> 然后按 <code>tab</code></p><a id="more"></a><p>可以生成以 <code>Lorem ipsum</code> 开头类似于下面这样子的乱数假文</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod<br>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,<br>quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo<br>consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse<br>cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non<br>proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;lorem&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入 &lt;code&gt;lorem&lt;/code&gt; 然后按 &lt;code&gt;tab&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://www.imaom.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="小技巧" scheme="https://www.imaom.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Sublime Text" scheme="https://www.imaom.com/tags/Sublime-Text/"/>
    
      <category term="vs code" scheme="https://www.imaom.com/tags/vs-code/"/>
    
  </entry>
  
</feed>
